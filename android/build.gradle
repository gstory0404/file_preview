import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

group 'com.gstory.file_preview'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.8.20'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
//String localMavenPath = project.mkdir("libs").absolutePath
//String localMavenBuildPath = project.mkdir("build").absolutePath

rootProject.allprojects {
    repositories {
//        maven { url "https://gitee.com/VickyLeu/uooc_flutter_repo/raw/master/" }
        google()
        mavenCentral()
        maven { url 'https://mirrors.tuna.tsinghua.edu.cn/flutter/download.flutter.io' }
        maven { url 'https://raw.github.com/vickyleu/uooc_flutter_repo/master/' }
//        maven { url "file://$localMavenPath" }
    }
}



apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    namespace 'com.gstory.file_preview'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        minSdkVersion 16
    }
}

//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "io.flutter:flutter_embedding_debug:1.0.0-c08d7d5efc9aa6eb3c30cfb3be6dc09bca5e7631"
//    tbsfile
    api "com.tencent.tbs:tbsfile:1.0.5"
//    implementation 'com.gitee.VickyLeu:uooc_flutter_repo:-SNAPSHOT'
//    task useAar 用于生成本地maven

}

//String aarPath = localMavenBuildPath
/*

task useAar {
    File file = project.file("libs")
    if (file.exists() && file.isDirectory()) {
        file.listFiles(new FileFilter() {
            @Override
            boolean accept(File pathname) {
                return pathname.name.endsWith(".aar")
            }
        }).each { item ->
            String aarName = item.name.substring(0, item.name.length() - 4)
            String[] aarInfo = aarName.split("-")
            if (aarInfo.size()==3){
                String sha1 = getFileSha1(item)
                String md5 = getFileMD5(item)
                println("aar: " + aarInfo + " file sha1:" + sha1 + " md5:" + md5)

                String fromStr = item.path
                String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]

                String metadataCopyPath = aarPath + "/" + aarInfo[0].replace(".", "/")
                String metadataCopyPathDst = localMavenPath //+ "/" + aarInfo[0].replace(".", "/")
                File metadataCopyFile = new File(metadataCopyPath)
                File metadataCopyFileDst = new File(metadataCopyPathDst)
                if (!metadataCopyFileDst.exists()){
                    metadataCopyFileDst.mkdirs()
                }
                def contain = false
                if (metadataCopyFile.exists() && metadataCopyFile.listFiles().size()>0){
                    if (!new File(metadataCopyPathDst,aarInfo[0].replace(".", "/").split("/").first() ).exists() ){
                       File dest = new File(metadataCopyPathDst,aarInfo[0].replace(".", "/"))
                        try {
                            copyDirectory(metadataCopyFile, dest)
                        } catch (IOException e) {
                            e.printStackTrace()
                        }
                    }else{
                        contain=true
                    }
                }
                println("metadataCopyFile::::${metadataCopyFile.absolutePath} metadataCopyFileDst:${metadataCopyFileDst.absolutePath}")


                String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
                if (!contain){
                    String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"
                    project.copy {
                        from fromStr
                        into intoStr
                        rename(item.name, newName)
                    }

                    project.file(intoStr + "/" + newName + ".md5").write(md5)
                    project.file(intoStr + "/" + newName + ".sha1").write(sha1)

                    String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
                    project.file(pomPath).write(createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
                    project.file(pomPath + ".md5").write(getFileMD5(project.file(pomPath)))
                    project.file(pomPath + ".sha1").write(getFileSha1(project.file(pomPath)))

                    project.file(metadataPath).write(createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
                    project.file(metadataPath + ".md5").write(getFileMD5(project.file(metadataPath)))
                    project.file(metadataPath + ".sha1").write(getFileSha1(project.file(metadataPath)))
                }
                dependencies {
                    def impl = "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
                    println("impl::::${impl}  metadataPath:$metadataPath  metadataCopyPath:$metadataCopyPath")
                    implementation impl
                }
            }

        }
    }
}*/

static  void copyDirectory(File sourceLocation , File targetLocation)  throws IOException {
    if (sourceLocation.isDirectory()) {
        if (!targetLocation.exists()) {
            targetLocation.mkdirs()
        }

        String[] children = sourceLocation.list()
        for (int i=0; i<children.length; i++) {
            copyDirectory(new File(sourceLocation, children[i]),
                    new File(targetLocation, children[i]))
        }
    } else {

        InputStream inn = new FileInputStream(sourceLocation)
        OutputStream out = new FileOutputStream(targetLocation)

        // Copy the bits from instream to outstream
        byte[] buf = new byte[1024]
        int len
        while ((len = inn.read(buf)) > 0) {
            out.write(buf, 0, len)
        }
        inn.close()
        out.close()
    }
}

static String createMetadataStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<metadata>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <versioning>\n" +
            "    <release>$version</release>\n" +
            "    <versions>\n" +
            "      <version>$version</version>\n" +
            "    </versions>\n" +
            "    <lastUpdated>${new Date().format('yyyyMMdd')}000000</lastUpdated>\n" +
            "  </versioning>\n" +
            "</metadata>\n"
}

static String createPomStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
            "  <modelVersion>4.0.0</modelVersion>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <version>$version</version>\n" +
            "  <packaging>aar</packaging>\n" +
            "</project>\n"
}

static String getFileSha1(File file) {
    FileInputStream input = null
    try {
        input = new FileInputStream(file)
        MessageDigest digest = MessageDigest.getInstance("SHA-1")
        byte[] buffer = new byte[1024 * 1024 * 10]

        int len = 0
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len)
        }
        String sha1 = new BigInteger(1, digest.digest()).toString(16)
        int length = 40 - sha1.length()
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                sha1 = "0" + sha1
            }
        }
        return sha1
    }
    catch (IOException e) {
        System.out.println(e)
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e)
    }
    finally {
        try {
            if (input != null) {
                input.close()
            }
        }
        catch (IOException e) {
            System.out.println(e)
        }
    }
}

static String getFileMD5(File file) {
    FileInputStream input = null
    try {
        input = new FileInputStream(file)
        MessageDigest digest = MessageDigest.getInstance("MD5")
        byte[] buffer = new byte[1024 * 1024 * 10]

        int len = 0
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len)
        }
        String md5 = new BigInteger(1, digest.digest()).toString(16)
        int length = 32 - md5.length()
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                md5 = "0" + md5
            }
        }
        return md5
    }
    catch (IOException e) {
        System.out.println(e)
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e)
    }
    finally {
        try {
            if (input != null) {
                input.close()
            }
        }
        catch (IOException e) {
            System.out.println(e)
        }
    }
}